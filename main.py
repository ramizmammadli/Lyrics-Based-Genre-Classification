# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import requests
import json
import os

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(461, 331)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lyrics = QtWidgets.QTextEdit(self.centralwidget)
        self.lyrics.setGeometry(QtCore.QRect(10, 10, 361, 241))
        self.lyrics.setObjectName("lyrics")
        self.submit = QtWidgets.QPushButton(self.centralwidget)
        self.submit.setGeometry(QtCore.QRect(11, 260, 171, 20))
        self.submit.setStyleSheet("background-color : #00ff00;")
        self.submit.setObjectName("submit")
        self.results = QtWidgets.QLabel(self.centralwidget)
        self.results.setGeometry(QtCore.QRect(50, 290, 401, 16))
        self.results.setText("")
        self.results.setObjectName("results")
        self.exitall = QtWidgets.QPushButton(self.centralwidget)
        self.exitall.setGeometry(QtCore.QRect(200, 260, 171, 20))
        self.exitall.setStyleSheet("background-color : #ff3908;")
        self.exitall.setObjectName("exitall")
        self.model1 = QtWidgets.QCheckBox(self.centralwidget)
        self.model1.setGeometry(QtCore.QRect(380, 20, 91, 16))
        self.model1.setObjectName("model1")
        self.model2 = QtWidgets.QCheckBox(self.centralwidget)
        self.model2.setGeometry(QtCore.QRect(380, 50, 91, 16))
        self.model2.setObjectName("model2")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 290, 41, 16))
        self.label_2.setObjectName("label_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.submit.clicked.connect(lambda: self.guess_genre())
        self.exitall.clicked.connect(lambda: self.closeApp())


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Lyrics Based Genre Classification"))
        self.submit.setText(_translate("MainWindow", "Submit"))
        self.exitall.setText(_translate("MainWindow", "Exit"))
        self.model1.setText(_translate("MainWindow", "1st Model"))
        self.model2.setText(_translate("MainWindow", "2nd Model"))
        self.label_2.setText(_translate("MainWindow", "Answer:"))


    def guess_genre(self):
        url = "https://api-inference.huggingface.co/models/ramizmammad/autonlp-lyrics-based-genre-classification-"
        if self.model1.isChecked():
            url = url + "436711376"
            self.model2.setChecked(False)
        else:
            url = url + "436711386"
            self.model1.setChecked(False)

        lyrics_text = ui.lyrics.toPlainText()

        payload = json.dumps({
            "inputs": lyrics_text
        })
        headers = {
            'Authorization': 'Bearer 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',
            'Content-Type': 'application/json'
        }

        response = requests.request("POST", url, headers=headers, data=payload)
        self.results.setText(self.print_func(response.text))


    def print_func(self, raw_text):
        raw_json = json.loads(raw_text)
        raw_json = raw_json[0]
        raw_json.sort(key=lambda x: x["score"], reverse=True)
        text = ""
        for i in range(0, 5):
            text = text + str(raw_json[i]["label"]) + ": " + str(round(raw_json[i]["score"] * 100, 2)) + "%  "

        return text


    def closeApp(self):
        exit()


if __name__ == "__main__":
    import sys
    os.environ["QT_AUTO_SCREEN_SCALE_FACTOR"] = "1"
    app = QtWidgets.QApplication(sys.argv)
    app.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())